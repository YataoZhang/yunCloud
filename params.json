{"name":"Yuncloud.GitHub.io","tagline":"一个轻量级的js前端模版库","body":"yunCloud\r\n============\r\n\r\n## yunCloud中文文档 \r\n*一个轻量级的js前端模版库*\r\n\r\n`yunCloud` 是一个高效、轻量`[压缩完只有2k]`、兼容`javascript`逻辑语法的前端 (Javascript) 模板引擎，使用 `yunCloud` 可以是你的代码实现数据和视图模型的分离(MVC)。 除此之外，它还可以在 `Node.js` 环境中运行（正在测试中）。\r\n\r\n你可以在遵守 MIT Licence 的前提下随意使用并分发它。yunCloud 代码完全开源并托管在 Github 上。\r\n\r\n### yunCloud的引入\r\n``` html\r\n  <script type=\"text/javascript\" src=\"yunCloud.js\"></script>\r\n```\r\n### * 使用方法\r\n##### | 编译模板并根据所给的数据立即渲染出结果.\r\n```js\r\n var tpl = yunCloud(tpl, data);\r\n```\r\n##### | 仅编译模版暂不渲染，它会返回一个可重用的编译后的函数.\r\n```js\r\n var template_String = yunCloud(tpl);\r\n // 根据Data渲染得到html\r\n template_String(data);\r\n```\r\n##### | 注册/注销自定义函数，实现angularJS中的过滤器。在下边 <%= 变量 %> 中会有实例。\r\n```js\r\nyunCloud.register('filterName', function);\r\nyunCloud.unregister('filterName');\r\n```\r\n### * 语法\r\n##### | <%= 变量 %>\r\n```\r\n<%= content %>\r\n<%= content|filter %>\r\n```\r\n```js\r\nvar str = 'hello <%= name|filter %>';\r\nyunCloud.register('filter', function (data) {\r\n    return data + '_Filter';\r\n});\r\nvar Str = yunCloud(str, {name: 'world'});\r\nconsole.log(Str); // => hello world_Filter\r\n```\r\n##### | <%- 变量 %>\r\n> 这个是为了解决内容转义提供的功能。(此写法不支持Filter过滤器)\r\n\r\n*例如：需要在页面中显示`<script>alert(1);</script>` 直接使用<%= 变量 %>会发现页面会执行此内容。如果使用<%- 变量 %>会对内容进行转义。在页面中是不会执行此内容，而是原原本本的在页面中输出。*\r\n```js\r\nvar str = '<%- <script>alert(1);</script> %>'\r\nstr = yunCloud(str)();\r\ndocument.getElementById('ele').innerHTML = str;\r\n// 页面未弹出1\r\n```\r\n##### | <%& javascript变量 %>\r\n此命令会原样输出javascript变量\r\n```js\r\nvar tpl = '<% var name = \"hello\" %><div><%& name %></div>';\r\n\r\nyunCloud(tpl)();\r\n```\r\n##### | <% javascript逻辑代码 %>\r\n```js\r\nvar tpl = [\r\n    '<% for(var i = 0;i<10;i++) {%>',\r\n      '<div>这是第<%& i %>个div</div>',\r\n    '<% } %>'\r\n  ].join('');\r\n  \r\nyunCloud(tpl);\r\n\r\n```\r\n##### 让我们通过一个例子演示一下自定义函数的奇妙用法吧.\r\n```js\r\nvar jsonData = {\r\n    linkList: [\r\n        {href: 'http://www.baidu.com', alt: '百度一下'},\r\n        {href: 'http://pan.baidu.com', alt: '百度网盘'},\r\n        {href: 'http://yun.baidu.com', alt: '百度云'}\r\n    ]\r\n};\r\n\r\nvar tpl = [\r\n    '<ul>',\r\n        '<% for(var i=0,len=linkList.length;i<len;i++){ %>',\r\n            '<% var val = linkList[i]; %>',\r\n            '<li><%= val|linkFilter %></li>',\r\n        '<% } %>',\r\n    '</ul>'\r\n].join('');\r\n\r\nvar linkFilter = function (data) {\r\n     return '<a href=\"' + data.href + '\" alt=\"' + data.alt + '\" />';\r\n};\r\n\r\nyunCloud.register('linkFilter', linkFilter);\r\n\r\nyunCloud(tpl, jsonData);\r\n\r\n// \r\n\r\n```\r\n上面的方法会生成如下的`html`。接下来就可以按照开发者的应用场景进行更灵活的开发。\r\n```html\r\n<ul>\r\n  <li>\r\n    <a href=\"http://www.baidu.com\" alt=\"百度一下\" />\r\n  </li>\r\n  <li>\r\n    <a href=\"http://pan.baidu.com\" alt=\"百度网盘\" />\r\n  </li>\r\n  <li>\r\n    <a href=\"http://yun.baidu.com\" alt=\"百度云\" />\r\n  </li>\r\n</ul>\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}